// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import logger from "./helpers/logger";
import { getToken } from "next-auth/jwt";
import { GetTokenParams } from "next-auth/jwt";

export async function middleware(req: NextRequest) {
  const start = Date.now();
  const token = await getToken({
    req,
    secret: process.env.AUTH_SECRET ?? "default-secret-key",
    salt: process.env.AUTH_SALT ?? "default-salt",
  } as GetTokenParams<false>); // Add 'as GetTokenParams<false>' to specify the type.
  const end = Date.now();
  const responseTime = end - start;

  if (process.env.NODE_ENV === "development") {
    logger.info({
      method: req.method,
      url: req.url,
      authToken: token ? "present" : "missing",
      responseTime: `${responseTime}ms`,
    });
  }

  if (token) {
    return NextResponse.next();
  } else {
    const isAuthRoute =
      req.nextUrl.pathname === "/" ||
      req.nextUrl.pathname.startsWith("/sign-in") ||
      req.nextUrl.pathname.startsWith("/register");

    if (isAuthRoute) {
      return NextResponse.next();
    } else {
      const loginUrl = new URL("/sign-in", req.url);
      return NextResponse.redirect(loginUrl);
    }
  }
}
